trigger:
  branches:
    include:
      - Desarrollo

variables:
  - group: GitHubSecrets
  - group: AZURE_TOKEN

pool:
  name: 'Default'

steps:
# Paso 1: Verificar el agente
- script: echo 'Iniciando Desarrollo para Front-End...'
  displayName: 'Verificar Agente'

# Paso 2: Instalar dependencias de React
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Instalar Node.js'

- script: |
    cd frontend
    npm install
  displayName: 'Instalar dependencias de React'

# Paso 3: Verificar existencia de package.json
- script: |
    echo Verificando si package.json existe...
    dir frontend
  displayName: 'Verificar existencia de package.json'

# Paso 4: Validación de código y ejecución de pruebas
- script: |
    cd frontend
    npm run lint  # Asegúrate de que este script esté en package.json
    npm test
  displayName: 'Validación de código y pruebas'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'Resultados de las pruebas Front-End'
  displayName: 'Publicar los resultados de las pruebas'

# Paso 5: Empaquetar la aplicación en un archivo .zip
- script: |
    echo "Empaquetando la aplicación..."
    powershell Compress-Archive -Path $(Build.SourcesDirectory)\* -DestinationPath $(Build.ArtifactStagingDirectory)\NaVisheWebApp.zip
  displayName: 'Empaquetar la aplicación'

# Paso 6: Despliegue a QA
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'AzureForStudentsConnection'
    appName: 'NaVisheWebApp'
    package: '$(Build.ArtifactStagingDirectory)/NaVisheWebApp.zip'
    displayName: 'Desplegar a QA'

# Paso 7: Notificación de despliegue
- script: echo "🚀 Despliegue completado en el entorno de QA para Front-End"
  displayName: 'Finalización del Deploy'

